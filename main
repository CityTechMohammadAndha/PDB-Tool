#!/usr/bin/env python3

import sys

atom_serial_number = []
residue = []
chain_ID = []
res_seq_num = []
x_coordinate = []
y_coordinate = []
z_coordinate = []
element_name = []
atom_records = []
count = 0

def atom_info(count):

    try:
        with open(sys.argv[1], "r") as file:
            contents = file.read()
            lines = contents.splitlines()
            for line in lines:
            #lines = contents.splitlines()
                if line.startswith('ATOM'):
                    count += 1
                    #print(line)
                    atom_records.append(line)
                    residue.append(line[17:20])
                    for res in residue:
                        if len(res.strip()) < 3:
                            residue.remove(res)
                    atom_serial_number.append(line[7:11])
                    chain_ID.append(line[21])
                    res_seq_num.append(line[23:26])
                    x_coordinate.append(line[31:38])
                    y_coordinate.append(line[39:46])
                    z_coordinate.append(line[47:54])
                    element_name.append(line[77:78])
            return count

            #print(residue)
    #print(atom_serial_number)
    #print(chain_ID)
    #print(res_seq_num)
    #print(x_coordinate)
    #print(y_coordinate)
    #print(z_coordinate)
    #print(element_name)
    #print(atom_records)   


    except PermissionError:
    #   print("No access to file")
    #   print("Usage: <pdbTool.py> <valid pdb file name>")

 #except FileNotFoundError:
    #   print("File does not exist")
    #  print("Usage: <pdbTool.py> <valid pdb file name>")

    except IndexError:
        print("A valid file isn't entered")
        print("Usage: <pdbTool.py> <valid pdb file name>")
        return count

    except Exception as error:
        print("Usage: <pdbTool.py> <valid pdb file name>")
        print("For any other error, follow the proper usage format")
        return count

    return count

def help():

    HelpMenu = True
    while HelpMenu:
        print("""
        1.help
        2.Program Details
        3.atomFreq
        4.resFreq
        5.resLength
        6.quit
        Type Exit to exit the help menu
        """)
        HelpInput=input("Type in a command or it's corresponding number to learn its function: ")
        UserInput=HelpInput.lower()

        if UserInput=="help" or UserInput=="1":
            print("The help function provides a menu that lists the fuctions of the program")
        elif UserInput=="Program Details" or UserInput=='2':
            print("The program is designed to give an organized data collection or record extracted from a PDB file with information about the atoms such as the atom frequency, residue frequency, and the maximum distance of the distances")
        elif UserInput=="atomFreq" or UserInput=="3":
            print("Displays each distinct atom that is present in the file and the number of times it occurs in the file")
            print("Output: element: <n>")
        elif UserInput=="resFreq" or UserInput=="4":
            print("Displays each distinct residue represented by the atoms of the file")
            print("Output: residue: <n>")
        elif UserInput=="resLength" or UserInput=="5":
            print("The reslength function allows you to calculate the distance between every pair of atoms in the specified residue and displays the maximum distance of the distances")
            print("usage: reslength <res_name> <chain_id> <res_seq_num>")
            print("<res_name> with sequence number <res_seq_num> in chain <chain_id> has length <distance> angstroms")
   elif UserInput=="quit" or UserInput=="6":
            print("The quit function allows you to quit the program if you type quit as a command")
        elif UserInput=="exit":
            break
        else:
            print("Invalid Input; Please enter a valid response from the menu")


def atomFreq():

    atomFreq = dict()

    for element in element_name:
        try:
            atomFreq[element] += 1
        except:
            atomFreq[element] = 1

    for element in (sorted(atomFreq)):
        print(element, ':', atomFreq[element])


def resFreq():

    resFreq = dict()

    for res in residue:
        try:
            resFreq[res] += 1
        except:
            resFreq[res] = 1

    for res in (sorted(resFreq)):
        print(res, ':',resFreq[res])


def resLength(residue, chain_ID, res_seq_num):

    #resLength = dict()

    #for res 
    #print("YAY")
    print(residue)
    print(chain_ID)
    print(res_seq_num)



def main(x):

    #with open(sys.argv[1], "r") as file:
        #contents = file.read()
                                                             
        #while contents:
            #frequency = atom_info(count)
            #print("Welcome to the pdb program. \nTo begin, try typing 'help' for the list of valid commands.")
            #print(frequency, "atoms recorded.")  

    if x == "help":
        help()
    elif x == "atomFreq":
        atomFreq()
    elif x == "resFreq":
        resFreq()
    elif len(x.split()) == 4:
        y = x.split()
        u = ['resLength']
        if y[0] in u and y[2] in chain_ID:
            if y[1].isupper() and y[2].isupper() is True:
                if y[1] in residue:
                    if y[3] in res_seq_num and int(y[3]):
                        try:
                            for line in atom_records:
                                if line[17:20] == y[1] and line[21] == y[2] and line[23:26] == y[3]:
                                    #print("workssss")
                                    resLength(y[1], y[2], y[3])

                                elif not line[17:20] == y[1] and line[21] == y[2] and line[23:26] == y[3]:
                                    print("No residue present")
                                    break
                        except:
                            #if not line[17:20] == y[1] and line[21] == y[2] and line[23:26] == y[3]:
                            print("An error occurred")

                    else:
                        #print("Enter the correct command with its required arguments")
                        print("annoying")
                #else:
                    #print("Enter the correct command with its required argument")
                else:
                    print("No residue present")
            else:
                print("Enter the correct command with its required arguments")
                print("Usage: reslength <res_name> <chain_id> <res_seq_num>")
                print("For details about the reslength command, use the 'help' command.")
                                                                                                                                                                      192,1         76%
        else:
        #print("Enter the correct command with its required arguments")
            print("Doesn't work")

    elif x == "quit":
        print("Leaving the program. Thank you for using the pdb tool.")
        #file.close()
        exit()

    else:
        print("Invalid Command or missing arguments/wrong number of arguments entered to the command")


frequency = atom_info(count)
print("Welcome to the pdb program. \nTo begin, try typing 'help' for the list of valid commands or typing quit to exit the program")
print(frequency, "atoms recorded.")

with open(sys.argv[1], "r") as file:
    contents = file.read()

    while contents:
       # frequency = atom_info(count)
       # print("Welcome to the pdb program. \nTo begin, try typing 'help' for the list of valid commands or typing quit to exit the program")
       # print(frequency, "atoms recorded.")

        x = input("Enter a command: ")
        main(x)

        #if x == "quit":
         #   print("Leaving the program. Thank you for using the pdb tool.")
         #   break

file.close()

if __name__ == "__main__":
    main(x)










            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
